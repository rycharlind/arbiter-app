// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[],"name":"policy","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"exchangeAmt","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"callMyEvent","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"receiver1","type":"address"},{"name":"receiver2","type":"address"},{"name":"receiver3","type":"address"},{"name":"policyNumber","type":"string"},{"name":"faceamount","type":"uint256"},{"name":"retentionAmount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getBalanceInEth","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"policy","type":"string"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"amountreciever1","type":"uint256"},{"indexed":false,"name":"amountreceiver2","type":"uint256"},{"indexed":false,"name":"amountreceiver3","type":"uint256"}],"name":"myEvent","type":"event"}],
    binary: "6060604052600160a060020a0332166000908152602081905260409020620f4240905561067c806100306000396000f3606060405236156100565760e060020a60003504630505c8c98114610058578063167f2436146100b557806324fec94b146100cd57806344b23477146101705780637bd703e81461023a578063f8b2cb4f14610265575b005b60408051600180546020600282841615610100026000190190921691909104601f810182900482028401820190945283835261028b939083018282801561034a5780601f1061031f5761010080835404028352916020019161034a565b6102f960043560086020526000908152604090205481565b6100565b600280546003546004546005546040805160208101869052908101849052606081018390526080810182905260a08082526001805460001961010082841615020116979097049082018190527fe7da3758359fb0f98120eff046e4dc79df78958541c8f16e9585fa00f4b0ef8796959493929190819060c08201908890801561037d5780601f106103525761010080835404028352916020019161037d565b604080516020606435600481810135601f810184900484028501840190955284845261030b9481359460248035956044359560849492019190819084018382808284375094965050933593505060a435915050600060008284036002600050819055508460016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103c257805160ff19168380011785555b506103f29291505b808211156104335760008155600101610226565b6102f960043560007306407b51f32b7b70b87b4b50611a8b4d06cfd6376396e4ee3d6106378461026c565b6102f96004355b600160a060020a0381166000908152602081905260409020545b919050565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60408051918252519081900360200190f35b604080519115158252519081900360200190f35b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b505050505081565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050965050505050505060405180910390a1565b600354604051600160a060020a038a169160009182818181858883f19550859450505050505b509695505050505050565b8280016001018555821561021e579182015b8281111561021e5782518260005055916020019190600101906103d4565b505060025460009011801561040c57506002546207a12090105b1561043757600280549081046003908155600a9082020460045560059081900490556104a2565b5090565b6002546207a12090108015906104535750600254620f42409011155b1561047a57600280549081046003908155600a9082020460045560059081900490556104a2565b600254620f42409011156104a257600280546005918102829004600381905560045581900490555b6003546005546004549185019091010184146104c157600091506103b7565b826008600050600033600160a060020a0316815260200190815260200160002060005081905550600360005054600860005060008a600160a060020a03168152602001908152602001600020600050819055506004600050546008600050600089600160a060020a03168152602001908152602001600020600050819055506005600050546008600050600088600160a060020a0316815260200190815260200160002060005081905550826000600050600033600160a060020a0316815260200190815260200160002060005081905550600360005054600060005060008a600160a060020a031681526020019081526020016000206000828282505401925050819055506004600050546000600050600089600160a060020a031681526020019081526020016000206000828282505401925050819055506005600050546000600050600088600160a060020a031681526020019081526020016000206000828282505401925050819055506103916100d1565b60026040518360e060020a02815260040180838152602001828152602001925050506020604051808303818660325a03f415610002575050604051519150610286905056",
    unlinked_binary: "6060604052600160a060020a0332166000908152602081905260409020620f4240905561067c806100306000396000f3606060405236156100565760e060020a60003504630505c8c98114610058578063167f2436146100b557806324fec94b146100cd57806344b23477146101705780637bd703e81461023a578063f8b2cb4f14610265575b005b60408051600180546020600282841615610100026000190190921691909104601f810182900482028401820190945283835261028b939083018282801561034a5780601f1061031f5761010080835404028352916020019161034a565b6102f960043560086020526000908152604090205481565b6100565b600280546003546004546005546040805160208101869052908101849052606081018390526080810182905260a08082526001805460001961010082841615020116979097049082018190527fe7da3758359fb0f98120eff046e4dc79df78958541c8f16e9585fa00f4b0ef8796959493929190819060c08201908890801561037d5780601f106103525761010080835404028352916020019161037d565b604080516020606435600481810135601f810184900484028501840190955284845261030b9481359460248035956044359560849492019190819084018382808284375094965050933593505060a435915050600060008284036002600050819055508460016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103c257805160ff19168380011785555b506103f29291505b808211156104335760008155600101610226565b6102f9600435600073__ConvertLib____________________________6396e4ee3d6106378461026c565b6102f96004355b600160a060020a0381166000908152602081905260409020545b919050565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156102eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60408051918252519081900360200190f35b604080519115158252519081900360200190f35b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b505050505081565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050965050505050505060405180910390a1565b600354604051600160a060020a038a169160009182818181858883f19550859450505050505b509695505050505050565b8280016001018555821561021e579182015b8281111561021e5782518260005055916020019190600101906103d4565b505060025460009011801561040c57506002546207a12090105b1561043757600280549081046003908155600a9082020460045560059081900490556104a2565b5090565b6002546207a12090108015906104535750600254620f42409011155b1561047a57600280549081046003908155600a9082020460045560059081900490556104a2565b600254620f42409011156104a257600280546005918102829004600381905560045581900490555b6003546005546004549185019091010184146104c157600091506103b7565b826008600050600033600160a060020a0316815260200190815260200160002060005081905550600360005054600860005060008a600160a060020a03168152602001908152602001600020600050819055506004600050546008600050600089600160a060020a03168152602001908152602001600020600050819055506005600050546008600050600088600160a060020a0316815260200190815260200160002060005081905550826000600050600033600160a060020a0316815260200190815260200160002060005081905550600360005054600060005060008a600160a060020a031681526020019081526020016000206000828282505401925050819055506004600050546000600050600089600160a060020a031681526020019081526020016000206000828282505401925050819055506005600050546000600050600088600160a060020a031681526020019081526020016000206000828282505401925050819055506103916100d1565b60026040518360e060020a02815260040180838152602001828152602001925050506020604051808303818660325a03f415610002575050604051519150610286905056",
    address: "0x5db8758a519019bd9124a2b9edd10242b24c71fb",
    generated_with: "2.0.9",
    contract_name: "MetaCoin"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.MetaCoin = Contract;
  }

})();
