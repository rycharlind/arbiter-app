// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[],"name":"callMyEvent","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getBalanceInEth","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"receiver1","type":"address"},{"name":"receiver2","type":"address"},{"name":"receiver3","type":"address"},{"name":"faceamount","type":"uint256"},{"name":"retentionAmount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"policy","type":"uint256"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"amountreciever1","type":"uint256"},{"indexed":false,"name":"amountreceiver2","type":"uint256"},{"indexed":false,"name":"amountreceiver3","type":"uint256"}],"name":"myEvent","type":"event"}],
    binary: "6060604052600160a060020a0332166000908152602081905260409020620f424090556102bb806100306000396000f3606060405260e060020a600035046324fec94b811461003c5780637bd703e81461009c578063bb51c7ef146100c7578063f8b2cb4f1461011f575b005b61003a5b6001546002546003546004546005546040805195865260208601949094528484019290925260608401526080830152517f6b59bb6d1c2d7ffc7138acb8016dbbc0a65e4beeed105cd772c1b70455583d089181900360a00190a1565b6101526004356000738c61ddf2339ac1b01009b6fe88e8fd26bc15c9b66396e4ee3d61017884610126565b610164600435602435604435606435608435808203600281905560009081901180156100f857506002546207a12090105b156101ca57600280549081046003908155600a908202046004556005908190049055610235565b6101526004355b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b60408051918252519081900360200190f35b604080519115158252519081900360200190f35b60026040518360e060020a02815260040180838152602001828152602001925050506020604051808303818660325a03f41561000257505060405151915061014d9050565b5060015b95945050505050565b6002546207a12090108015906101e65750600254620f42409011155b1561020d57600280549081046003908155600a908202046004556005908190049055610235565b600254620f424090111561023557600280546005918102829004600381905560045581900490555b600454600354600554908401909101018314610253575060006101c1565b3373ffffffffffffffffffffffffffffffffffffffff90811660009081526020819052604080822085905560035489841683528183208054909101905560045488841683528183208054909101905560055492871682529020805490910190556101bd61004056",
    unlinked_binary: "6060604052600160a060020a0332166000908152602081905260409020620f424090556102bb806100306000396000f3606060405260e060020a600035046324fec94b811461003c5780637bd703e81461009c578063bb51c7ef146100c7578063f8b2cb4f1461011f575b005b61003a5b6001546002546003546004546005546040805195865260208601949094528484019290925260608401526080830152517f6b59bb6d1c2d7ffc7138acb8016dbbc0a65e4beeed105cd772c1b70455583d089181900360a00190a1565b610152600435600073__ConvertLib____________________________6396e4ee3d61017884610126565b610164600435602435604435606435608435808203600281905560009081901180156100f857506002546207a12090105b156101ca57600280549081046003908155600a908202046004556005908190049055610235565b6101526004355b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b60408051918252519081900360200190f35b604080519115158252519081900360200190f35b60026040518360e060020a02815260040180838152602001828152602001925050506020604051808303818660325a03f41561000257505060405151915061014d9050565b5060015b95945050505050565b6002546207a12090108015906101e65750600254620f42409011155b1561020d57600280549081046003908155600a908202046004556005908190049055610235565b600254620f424090111561023557600280546005918102829004600381905560045581900490555b600454600354600554908401909101018314610253575060006101c1565b3373ffffffffffffffffffffffffffffffffffffffff90811660009081526020819052604080822085905560035489841683528183208054909101905560045488841683528183208054909101905560055492871682529020805490910190556101bd61004056",
    address: "0x2c3af1a59e7b9e60a29318bdbbe0584026961013",
    generated_with: "2.0.9",
    contract_name: "MetaCoin"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("MetaCoin error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.MetaCoin = Contract;
  }

})();
